name: Deploy to Development

on:
    workflow_dispatch:
    push:
        branches:
            - main

jobs:
    prepyrus_verify:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/cache/restore@v4
              id: prepyrus-cache-restore
              with:
                  path: target/release
                  key: ${{ runner.os }}-cargo-${{ hashFiles('scripts/prepyrus/Cargo.lock') }}-${{ hashFiles('scripts/prepyrus/src/**') }}
            - name: Install Rust
              if: steps.prepyrus-cache-restore.outputs.cache-hit != 'true'
              uses: actions-rust-lang/setup-rust-toolchain@v1

            - name: Install dependencies
              if: steps.prepyrus-cache-restore.outputs.cache-hit != 'true'
              run: cargo build --release --package prepyrus

            - name: Run prepyrus script in process mode
              run: target/release/prepyrus absolute_bibliography.bib src/pages verify

            - name: Save Prepyrus to cache
              id: prepyrus-cache-save
              if: steps.prepyrus-cache-restore.outputs.cache-hit != 'true'
              uses: actions/cache/save@v4
              with:
                  path: target/release
                  key: ${{ runner.os }}-cargo-${{ hashFiles('scripts/prepyrus/Cargo.lock') }}-${{ hashFiles('scripts/prepyrus/src/**') }}

    build_and_deploy:
        needs: prepyrus_verify
        if: github.repository_owner == 'systemphil'
        environment: dev
        runs-on: ubuntu-latest
        env:
            PROJECT_ID: ${{ secrets.PROJECT_ID }}
            SERVICE: ${{ secrets.SERVICE }}
            REGION: ${{ secrets.REGION }}
            TAG: latest

        steps:
            - name: Check if running in the parent repository
              run: |
                  if [ "${GITHUB_REPOSITORY}" != "systemphil/sphil" ]; then
                    echo "This workflow is only intended for the parent repository. Skipping deployment."
                    exit 1
                  fi

            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  repository: ${{ github.repository }}
                  ref: ${{ github.ref }}
                  fetch-depth: 1

            - uses: actions/cache/restore@v4
              id: prepyrus-cache-restore
              with:
                  path: target/release
                  key: ${{ runner.os }}-cargo-${{ hashFiles('scripts/prepyrus/Cargo.lock') }}-${{ hashFiles('scripts/prepyrus/src/**') }}

            - name: Run prepyrus in PROCESS mode
              run: target/release/prepyrus absolute_bibliography.bib src/pages process

            - name: Auth
              uses: "google-github-actions/auth@v2"
              with:
                  credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"

            - name: Docker Auth
              id: docker-auth
              uses: "docker/login-action@v1"
              with:
                  username: _json_key
                  password: "${{ secrets.GOOGLE_CREDENTIALS }}"
                  registry: "${{ env.REGION }}-docker.pkg.dev"

            - name: Build and Push Container
              # NEXT_PUBLIC_ env variables have to be set during the build phase.
              run: |-
                  docker build \
                    --build-arg NEXT_PUBLIC_SITE_ROOT=${{secrets.NEXT_PUBLIC_SITE_ROOT}} \
                    --build-arg NEXT_PUBLIC_GA_ID=${{secrets.NEXT_PUBLIC_GA_ID}} \
                    -f Dockerfile \
                    -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ env.TAG }}" ./
                  docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ env.TAG }}"

            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{env.SERVICE}} \
                    --platform=managed \
                    --region=${{ env.REGION }} \
                    --max-instances=4 \
                    --min-instances=default \
                    --image="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ env.TAG }}"
